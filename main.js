/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/templates/default.json
var require_default = __commonJS({
  "src/templates/default.json"(exports, module2) {
    module2.exports = {
      id: "default",
      name: "\u9ED8\u8BA4\u6A21\u677F",
      styles: {
        container: "width: 100% !important; table-layout: fixed; border-collapse: collapse; border: none; margin: 0; padding: 0; max-width: 100vw;",
        title: {
          h1: "font-weight: bold; margin: 32px 0 24px; font-size: 2em; color: #2c3e50;",
          h2: "font-weight: bold; margin: 28px 0 20px; font-size: 1.5em; color: #34495e;",
          h3: "font-weight: bold; margin: 24px 0 16px; font-size: 1.25em; color: #3d566e;",
          base: "font-weight: bold; margin: 20px 0 14px; font-size: 1em; color: #47637f;"
        },
        paragraph: "line-height: 1.8; margin-bottom: 1.2em; font-size: 1em; color: #4a4a4a;",
        list: {
          container: "padding-left: 20px; margin-bottom: 1.2em; color: #4a4a4a;",
          item: "margin-bottom: 0.6em; font-size: 1em; color: #4a4a4a; line-height: 1.8;",
          taskList: "list-style: none; margin-left: -24px; font-size: 1em; color: #4a4a4a; line-height: 1.8;"
        },
        code: {
          block: "background: #f8f8f8; padding: 0.5em 1em 1em; border-radius: 8px; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; line-height: 1.6; white-space: pre; overflow-x: auto; word-wrap: normal; color: #333; margin: 1.2em 0; border: 1px solid #eee; box-shadow: 0 2px 4px rgba(0,0,0,0.05); width: 100%;",
          inline: "background: #f8f8f8; padding: 2px 6px; border-radius: 4px; color: #333; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border: 1px solid #eee;"
        },
        quote: "border-left: 4px solid #e0e0e0; border-radius: 6px; padding: 16px 20px; background: #f6f8fa; margin: 0.8em 0; color: #6a737d; font-style: italic; font-size: 1em; word-wrap: break-word;",
        image: "max-width: 100%; height: auto; margin: 1em auto; display: block;",
        link: "color: #e0e0e0; text-decoration: none; border-bottom: 1px solid #e0e0e0;",
        emphasis: {
          strong: "font-weight: bold; color: #4a4a4a;",
          em: "font-style: italic; color: #4a4a4a;",
          del: "text-decoration: line-through; color: #4a4a4a;"
        },
        table: {
          container: "width: 100%; margin: 1em 0; border-collapse: collapse; border: 1px solid #e1e4e8;",
          header: "background: #f6f8fa; font-weight: bold; color: #4a4a4a; border-bottom: 2px solid #e1e4e8; font-size: 1em;",
          cell: "border: 1px solid #f0f0f0; padding: 8px; color: #4a4a4a; font-size: 1em;"
        },
        hr: "border: none; border-top: 1px solid #f0f0f0; margin: 20px 0;",
        footnote: {
          ref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;",
          backref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;"
        }
      }
    };
  }
});

// src/templates/minimal.json
var require_minimal = __commonJS({
  "src/templates/minimal.json"(exports, module2) {
    module2.exports = {
      id: "minimal",
      name: "\u6781\u7B80\u4E3B\u9898",
      styles: {
        container: "width: 100% !important; table-layout: fixed; border-collapse: collapse; border: none; margin: 0; padding: 0; max-width: 100vw;",
        title: {
          h1: "font-weight: bold; margin: 32px 0 24px; font-size: 2em; color: #3B4252; letter-spacing: -0.02em;",
          h2: "font-weight: bold; margin: 28px 0 20px; font-size: 1.5em; color: #434C5E; letter-spacing: -0.01em;",
          h3: "font-weight: bold; margin: 24px 0 16px; font-size: 1.25em; color: #4C566A;",
          base: "font-weight: bold; margin: 20px 0 14px; font-size: 1em; color: #5E81AC;"
        },
        paragraph: "line-height: 1.8; margin-bottom: 1.2em; font-size: 1em; color: #4a4a4a;",
        list: {
          container: "padding-left: 20px; margin-bottom: 1.2em; color: #4a4a4a;",
          item: "margin-bottom: 0.6em; font-size: 1em; color: #4a4a4a; line-height: 1.8;",
          taskList: "list-style: none; margin-left: -24px; font-size: 1em; color: #4a4a4a; line-height: 1.8;"
        },
        code: {
          block: "background: #f8f8f8; padding: 0.5em 1em 1em; border-radius: 8px; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; line-height: 1.6; white-space: pre; overflow-x: auto; word-wrap: normal; color: #333; margin: 1.2em 0; border: 1px solid #eee; box-shadow: 0 2px 4px rgba(0,0,0,0.05); width: 100%;",
          inline: "background: #f8f8f8; padding: 2px 6px; border-radius: 4px; color: #333; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border: 1px solid #eee;"
        },
        quote: "border-left: 4px solid #81A1C1; border-radius: 6px; padding: 16px 20px; background: #f8f9fc; margin: 0.8em 0; color: #4C566A; font-style: italic; font-size: 1em; word-wrap: break-word;",
        image: "max-width: 100%; height: auto; margin: 1em auto; display: block;",
        link: "color: #5E81AC; text-decoration: none; border-bottom: 1px solid #81A1C1; transition: all 0.2s ease;",
        emphasis: {
          strong: "font-weight: bold; color: #4a4a4a;",
          em: "font-style: italic; color: #4a4a4a;",
          del: "text-decoration: line-through; color: #4a4a4a;"
        },
        table: {
          container: "width: 100%; margin: 1em 0; border-collapse: collapse; border: 1px solid #e1e4e8;",
          header: "background: #f6f8fa; font-weight: bold; color: #4a4a4a; border-bottom: 2px solid #e1e4e8; font-size: 1em;",
          cell: "border: 1px solid #f0f0f0; padding: 8px; color: #4a4a4a; font-size: 1em;"
        },
        hr: "border: none; border-top: 1px solid #f0f0f0; margin: 20px 0;",
        footnote: {
          ref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;",
          backref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;"
        }
      }
    };
  }
});

// src/templates/elegant.json
var require_elegant = __commonJS({
  "src/templates/elegant.json"(exports, module2) {
    module2.exports = {
      id: "elegant",
      name: "\u4F18\u96C5\u4E3B\u9898",
      styles: {
        container: "width: 100% !important; table-layout: fixed; border-collapse: collapse; border: none; margin: 0; padding: 0; max-width: 100vw;",
        title: {
          h1: "font-weight: bold; margin: 32px 0 24px; font-size: 2em; color: #553C9A; letter-spacing: -0.03em; border-bottom: 2px solid #9F7AEA; padding-bottom: 0.3em;",
          h2: "font-weight: bold; margin: 28px 0 20px; font-size: 1.5em; color: #6B46C1; letter-spacing: -0.02em; border-left: 4px solid #9F7AEA; padding-left: 12px;",
          h3: "font-weight: bold; margin: 24px 0 16px; font-size: 1.25em; color: #805AD5; letter-spacing: -0.01em;",
          base: "font-weight: bold; margin: 20px 0 14px; font-size: 1em; color: #9F7AEA;"
        },
        paragraph: "line-height: 1.8; margin-bottom: 1.2em; font-size: 1em; color: #4a4a4a;",
        list: {
          container: "padding-left: 20px; margin-bottom: 1.2em; color: #4a4a4a;",
          item: "margin-bottom: 0.6em; font-size: 1em; color: #4a4a4a; line-height: 1.8;",
          taskList: "list-style: none; margin-left: -24px; font-size: 1em; color: #4a4a4a; line-height: 1.8;"
        },
        code: {
          block: "background: #f8f8f8; padding: 0.5em 1em 1em; border-radius: 8px; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; line-height: 1.6; white-space: pre; overflow-x: auto; word-wrap: normal; color: #333; margin: 1.2em 0; border: 1px solid #eee; box-shadow: 0 2px 4px rgba(0,0,0,0.05); width: 100%;",
          inline: "background: #f8f8f8; padding: 2px 6px; border-radius: 4px; color: #333; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border: 1px solid #eee;"
        },
        quote: "border-left: 4px solid #9F7AEA; border-radius: 6px; padding: 16px 20px; background: #f5f3ff; margin: 0.8em 0; color: #6B46C1; font-style: italic; font-size: 1em; word-wrap: break-word;",
        image: "max-width: 100%; height: auto; margin: 1em auto; display: block;",
        link: "color: #805AD5; text-decoration: none; border-bottom: 1px solid #9F7AEA; transition: all 0.2s ease;",
        emphasis: {
          strong: "font-weight: bold; color: #4a4a4a;",
          em: "font-style: italic; color: #4a4a4a;",
          del: "text-decoration: line-through; color: #4a4a4a;"
        },
        table: {
          container: "width: 100%; margin: 1em 0; border-collapse: collapse; border: 1px solid #e1e4e8;",
          header: "background: #f6f8fa; font-weight: bold; color: #4a4a4a; border-bottom: 2px solid #e1e4e8; font-size: 1em;",
          cell: "border: 1px solid #f0f0f0; padding: 8px; color: #4a4a4a; font-size: 1em;"
        },
        hr: "border: none; border-top: 1px solid #f0f0f0; margin: 20px 0;",
        footnote: {
          ref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;",
          backref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;"
        }
      }
    };
  }
});

// src/templates/dark.json
var require_dark = __commonJS({
  "src/templates/dark.json"(exports, module2) {
    module2.exports = {
      id: "dark",
      name: "\u6DF1\u8272\u4E3B\u9898",
      styles: {
        container: "width: 100% !important; table-layout: fixed; border-collapse: collapse; border: none; margin: 0; padding: 0; max-width: 100vw;",
        title: {
          h1: "font-weight: bold; margin: 32px 0 24px; font-size: 2em; color: #4A90E2; letter-spacing: -0.03em; border-bottom: 2px solid #4A90E2; padding-bottom: 0.3em;",
          h2: "font-weight: bold; margin: 28px 0 20px; font-size: 1.5em; color: #5B9BE0; letter-spacing: -0.02em; border-left: 4px solid #4A90E2; padding-left: 12px;",
          h3: "font-weight: bold; margin: 24px 0 16px; font-size: 1.25em; color: #6BA5DE; letter-spacing: -0.01em;",
          base: "font-weight: bold; margin: 20px 0 14px; font-size: 1em; color: #7BB0DD;"
        },
        paragraph: "line-height: 1.8; margin-bottom: 1.2em; font-size: 1em; color: #4a4a4a;",
        list: {
          container: "padding-left: 20px; margin-bottom: 1.2em; color: #4a4a4a;",
          item: "margin-bottom: 0.6em; font-size: 1em; color: #4a4a4a; line-height: 1.8;",
          taskList: "list-style: none; margin-left: -24px; font-size: 1em; color: #4a4a4a; line-height: 1.8;"
        },
        code: {
          block: "background: #f8f8f8; padding: 0.5em 1em 1em; border-radius: 8px; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; line-height: 1.6; white-space: pre; overflow-x: auto; word-wrap: normal; color: #333; margin: 1.2em 0; border: 1px solid #eee; box-shadow: 0 2px 4px rgba(0,0,0,0.05); width: 100%;",
          inline: "background: #f8f8f8; padding: 2px 6px; border-radius: 4px; color: #333; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border: 1px solid #eee;"
        },
        quote: "border-left: 4px solid #4A90E2; border-radius: 6px; padding: 16px 20px; background: #F5F9FF; margin: 0.8em 0; color: #4A5568; font-style: italic; font-size: 1em; word-wrap: break-word;",
        image: "max-width: 100%; height: auto; margin: 1em auto; display: block;",
        link: "color: #4A90E2; text-decoration: none; border-bottom: 1px solid #4A90E2; transition: all 0.2s ease;",
        emphasis: {
          strong: "font-weight: bold; color: #4a4a4a;",
          em: "font-style: italic; color: #4a4a4a;",
          del: "text-decoration: line-through; color: #4a4a4a;"
        },
        table: {
          container: "width: 100%; margin: 1em 0; border-collapse: collapse; border: 1px solid #e1e4e8;",
          header: "background: #f6f8fa; font-weight: bold; color: #4a4a4a; border-bottom: 2px solid #e1e4e8; font-size: 1em;",
          cell: "border: 1px solid #f0f0f0; padding: 8px; color: #4a4a4a; font-size: 1em;"
        },
        hr: "border: none; border-top: 1px solid #f0f0f0; margin: 20px 0;",
        footnote: {
          ref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;",
          backref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;"
        }
      }
    };
  }
});

// src/templates/academic.json
var require_academic = __commonJS({
  "src/templates/academic.json"(exports, module2) {
    module2.exports = {
      id: "academic",
      name: "\u5B66\u672F\u4E3B\u9898",
      styles: {
        container: "width: 100% !important; table-layout: fixed; border-collapse: collapse; border: none; margin: 0; padding: 0; max-width: 100vw;",
        title: {
          h1: "font-weight: bold; margin: 32px 0 24px; font-size: 2em; color: #5D4037; letter-spacing: -0.03em; border-bottom: 2px solid #8D6E63; padding-bottom: 0.3em;",
          h2: "font-weight: bold; margin: 28px 0 20px; font-size: 1.5em; color: #6D4C41; letter-spacing: -0.02em; border-left: 4px solid #8D6E63; padding-left: 12px;",
          h3: "font-weight: bold; margin: 24px 0 16px; font-size: 1.25em; color: #795548; letter-spacing: -0.01em;",
          base: "font-weight: bold; margin: 20px 0 14px; font-size: 1em; color: #8D6E63;"
        },
        paragraph: "line-height: 1.8; margin-bottom: 1.2em; font-size: 1em; color: #4a4a4a;",
        quote: "border-left: 4px solid #8D6E63; border-radius: 6px; padding: 16px 20px; background: #EFEBE9; margin: 0.8em 0; color: #5D4037; font-style: italic; font-size: 1em; word-wrap: break-word;",
        link: "color: #795548; text-decoration: none; border-bottom: 1px solid #8D6E63; transition: all 0.2s ease;",
        emphasis: {
          strong: "font-weight: 600; color: #4a4a4a;",
          em: "font-style: italic; color: #4a4a4a;",
          del: "text-decoration: line-through; color: #4a4a4a;"
        },
        list: {
          container: "padding-left: 20px; margin-bottom: 1.2em; color: #4a4a4a;",
          item: "margin-bottom: 0.6em; font-size: 1em; color: #4a4a4a; line-height: 1.8;",
          taskList: "list-style: none; margin-left: -24px; font-size: 1em; color: #4a4a4a; line-height: 1.8;"
        },
        code: {
          block: "background: #f8f8f8; padding: 0.5em 1em 1em; border-radius: 8px; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; line-height: 1.6; white-space: pre; overflow-x: auto; word-wrap: normal; color: #333; margin: 1.2em 0; border: 1px solid #eee; box-shadow: 0 2px 4px rgba(0,0,0,0.05); width: 100%;",
          inline: "background: #f8f8f8; padding: 2px 6px; border-radius: 4px; color: #333; font-size: 14px; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border: 1px solid #eee;"
        },
        image: "max-width: 100%; height: auto; margin: 1em auto; display: block;",
        table: {
          container: "width: 100%; margin: 1em 0; border-collapse: collapse; border: 1px solid #e1e4e8;",
          header: "background: #f6f8fa; font-weight: bold; color: #4a4a4a; border-bottom: 2px solid #e1e4e8; font-size: 1em;",
          cell: "border: 1px solid #f0f0f0; padding: 8px; color: #4a4a4a; font-size: 1em;"
        },
        hr: "border: none; border-top: 1px solid #f0f0f0; margin: 20px 0;",
        footnote: {
          ref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;",
          backref: "color: #e0e0e0; text-decoration: none; font-size: 0.9em;"
        }
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MPPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/view.ts
var import_obsidian2 = require("obsidian");

// src/converter.ts
var MPConverter = class {
  static initialize(app) {
    this.app = app;
  }
  static formatContent(element) {
    const table = this.createWrapperTable(element);
    this.processElements(table.querySelector("td"));
  }
  static createWrapperTable(element) {
    const table = document.createElement("table");
    const tbody = document.createElement("tbody");
    const tr = document.createElement("tr");
    const td = document.createElement("td");
    table.style.width = "100%";
    table.style.borderCollapse = "collapse";
    td.style.wordBreak = "break-all";
    while (element.firstChild) {
      td.appendChild(element.firstChild);
    }
    tr.appendChild(td);
    tbody.appendChild(tr);
    table.appendChild(tbody);
    element.appendChild(table);
    return table;
  }
  static processElements(container) {
    if (!container) return;
    container.querySelectorAll("strong, em").forEach((el) => {
      el.style.display = "inline";
    });
    container.querySelectorAll("a").forEach((el) => {
      el.style.color = "#576b95";
      el.style.textDecoration = "none";
    });
    container.querySelectorAll("table").forEach((el) => {
      if (el === container.closest("table")) return;
      el.style.borderCollapse = "collapse";
      el.style.margin = "1em 0";
      el.style.width = "100%";
    });
    container.querySelectorAll("th, td").forEach((el) => {
      if (el === container.closest("td")) return;
      el.style.border = "1px solid #dfdfdf";
      el.style.padding = "8px";
    });
    container.querySelectorAll("hr").forEach((el) => {
      el.style.border = "none";
      el.style.borderTop = "1px solid #dfdfdf";
      el.style.margin = "20px 0";
    });
    container.querySelectorAll("del").forEach((el) => {
      el.style.textDecoration = "line-through";
    });
    container.querySelectorAll(".task-list-item").forEach((el) => {
      el.style.listStyle = "none";
      const checkbox = el.querySelector('input[type="checkbox"]');
      if (checkbox) {
        checkbox.style.marginRight = "6px";
      }
    });
    container.querySelectorAll(".footnote-ref, .footnote-backref").forEach((el) => {
      el.style.color = "#576b95";
      el.style.textDecoration = "none";
    });
    container.querySelectorAll("pre code").forEach((el) => {
      const pre = el.parentElement;
      if (pre) {
        const dots = document.createElement("div");
        dots.style.cssText = `
                    margin: 8px 0 12px 0;
                    display: flex;
                    gap: 6px;
                `;
        const colors = ["#ff5f56", "#ffbd2e", "#27c93f"];
        colors.forEach((color) => {
          const dot = document.createElement("span");
          dot.style.cssText = `
                        width: 12px;
                        height: 12px;
                        border-radius: 50%;
                        background-color: ${color};
                    `;
          dots.appendChild(dot);
        });
        pre.insertBefore(dots, pre.firstChild);
        pre.style.paddingTop = "32px";
        const copyButton = pre.querySelector(".copy-code-button");
        if (copyButton) {
          copyButton.remove();
        }
      }
    });
    container.querySelectorAll("span.internal-embed[alt][src]").forEach((el) => __async(this, null, function* () {
      var _a;
      const originalSpan = el;
      const src = originalSpan.getAttribute("src");
      const alt = originalSpan.getAttribute("alt");
      if (!src) return;
      try {
        const linktext = src.split("|")[0];
        const file = this.app.metadataCache.getFirstLinkpathDest(linktext, "");
        if (file) {
          const absolutePath = this.app.vault.adapter.getResourcePath(file.path);
          const newImg = document.createElement("img");
          newImg.src = absolutePath;
          if (alt) newImg.alt = alt;
          newImg.style.maxWidth = "100%";
          newImg.style.height = "auto";
          newImg.style.display = "block";
          newImg.style.margin = "1em auto";
          (_a = originalSpan.parentNode) == null ? void 0 : _a.replaceChild(newImg, originalSpan);
        }
      } catch (error) {
        console.error("\u56FE\u7247\u5904\u7406\u5931\u8D25:", error);
      }
    }));
    container.querySelectorAll("blockquote").forEach((el) => {
      el.querySelectorAll("p").forEach((p) => {
        p.style.margin = "0";
        p.style.padding = "0";
        p.style.lineHeight = "inherit";
      });
    });
  }
};

// src/copyManager.ts
var import_obsidian = require("obsidian");
var CopyManager = class {
  static cleanupHtml(html) {
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = html;
    tempDiv.querySelectorAll("*").forEach((el) => {
      Array.from(el.attributes).forEach((attr) => {
        if (attr.name.startsWith("data-")) {
          el.removeAttribute(attr.name);
        }
      });
    });
    tempDiv.querySelectorAll("*").forEach((el) => {
      el.removeAttribute("class");
    });
    tempDiv.querySelectorAll("*").forEach((el) => {
      el.removeAttribute("id");
    });
    return tempDiv.innerHTML;
  }
  static processImages(container) {
    return __async(this, null, function* () {
      const images = container.querySelectorAll("img");
      const imageArray = Array.from(images);
      for (const img of imageArray) {
        try {
          const response = yield fetch(img.src);
          const blob = yield response.blob();
          const reader = new FileReader();
          yield new Promise((resolve, reject) => {
            reader.onload = () => {
              img.src = reader.result;
              resolve(null);
            };
            reader.onerror = reject;
            reader.readAsDataURL(blob);
          });
        } catch (error) {
          console.error("\u56FE\u7247\u8F6C\u6362\u5931\u8D25:", error);
        }
      }
    });
  }
  static copyToClipboard(element) {
    return __async(this, null, function* () {
      try {
        const container = document.createElement("div");
        container.style.position = "absolute";
        container.style.left = "-9999px";
        container.innerHTML = element.innerHTML;
        document.body.appendChild(container);
        yield this.processImages(container);
        const cleanHtml = this.cleanupHtml(container.innerHTML);
        const clipData = new ClipboardItem({
          "text/html": new Blob([cleanHtml], { type: "text/html" }),
          "text/plain": new Blob([container.textContent || ""], { type: "text/plain" })
        });
        document.body.removeChild(container);
        yield navigator.clipboard.write([clipData]);
        new import_obsidian.Notice("\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F");
      } catch (error) {
        new import_obsidian.Notice("\u590D\u5236\u5931\u8D25");
      }
    });
  }
};

// src/donateManager.ts
var DonateManager = class {
  static initialize(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  static showDonateModal(container) {
    this.overlay = container.createEl("div", {
      cls: "mp-donate-overlay"
    });
    this.modal = this.overlay.createEl("div", {
      cls: "mp-donate-modal"
    });
    const closeButton = this.modal.createEl("button", {
      cls: "mp-donate-close",
      text: "\xD7"
    });
    this.modal.createEl("h3", {
      text: "\u5173\u6CE8\u4F5C\u8005",
      cls: "mp-donate-title"
    });
    const content = this.modal.createEl("div", {
      cls: "mp-donate-content"
    });
    content.createEl("p", {
      text: "\u5982\u679C\u4F60\u559C\u6B22\u8FD9\u4E2A\u63D2\u4EF6\uFF0C\u6B22\u8FCE\u5173\u6CE8\u6211\u7684\u516C\u4F17\u53F7 \u2764\uFE0F",
      cls: "mp-donate-desc"
    });
    const qrContainer = content.createEl("div", {
      cls: "mp-donate-qr-container"
    });
    const qrCode = qrContainer.createEl("div", {
      cls: "mp-donate-qr active"
    });
    const qrPath = this.app.vault.adapter.getResourcePath(`${this.plugin.manifest.dir}/assets/qrcode.png`);
    qrCode.createEl("img", {
      attr: {
        src: qrPath,
        alt: "\u516C\u4F17\u53F7\u4E8C\u7EF4\u7801"
      }
    });
    content.createEl("p", {
      text: "\u516C\u4F17\u53F7\uFF1A\u591C\u534A",
      cls: "mp-donate-desc"
    });
    closeButton.addEventListener("click", () => this.closeDonateModal());
    this.overlay.addEventListener("click", (e) => {
      if (e.target === this.overlay) {
        this.closeDonateModal();
      }
    });
  }
  static closeDonateModal() {
    if (this.overlay) {
      this.overlay.remove();
    }
  }
};

// src/view.ts
var VIEW_TYPE_MP = "mp-preview";
var MPView = class extends import_obsidian2.ItemView {
  constructor(leaf, templateManager, settingsManager) {
    super(leaf);
    this.currentFile = null;
    this.updateTimer = null;
    this.isPreviewLocked = false;
    this.templateManager = templateManager;
    this.settingsManager = settingsManager;
  }
  getViewType() {
    return VIEW_TYPE_MP;
  }
  getDisplayText() {
    return "\u516C\u4F17\u53F7\u9884\u89C8";
  }
  getIcon() {
    return "eye";
  }
  // 在 onOpen 方法中更新底部锁定按钮的创建
  onOpen() {
    return __async(this, null, function* () {
      var _a, _b, _c, _d;
      const container = this.containerEl.children[1];
      container.empty();
      const toolbar = container.createEl("div", { cls: "mp-toolbar" });
      this.lockButton = toolbar.createEl("button", {
        cls: "mp-lock-button",
        attr: { "aria-label": "\u5173\u95ED\u5B9E\u65F6\u9884\u89C8\u72B6\u6001" }
      });
      this.lockButton.innerHTML = "\u{1F513}";
      this.lockButton.addEventListener("click", () => this.togglePreviewLock());
      const controlsGroup = toolbar.createEl("div", { cls: "mp-controls-group" });
      this.customTemplateSelect = this.createCustomSelect(
        controlsGroup,
        "mp-template-select",
        yield this.getTemplateOptions()
      );
      this.customTemplateSelect.id = "template-select";
      (_a = this.customTemplateSelect.querySelector(".custom-select")) == null ? void 0 : _a.addEventListener("change", (e) => __async(this, null, function* () {
        const value = e.detail.value;
        this.templateManager.setCurrentTemplate(value);
        yield this.settingsManager.updateSettings({
          templateId: value
        });
        this.templateManager.applyTemplate(this.previewEl);
      }));
      this.customFontSelect = this.createCustomSelect(
        controlsGroup,
        "mp-font-select",
        this.getFontOptions()
      );
      (_b = this.customFontSelect.querySelector(".custom-select")) == null ? void 0 : _b.addEventListener("change", (e) => __async(this, null, function* () {
        const value = e.detail.value;
        this.templateManager.setFont(value);
        yield this.settingsManager.updateSettings({
          fontFamily: value
        });
        this.templateManager.applyTemplate(this.previewEl);
      }));
      this.customFontSelect.id = "font-select";
      const fontSizeGroup = controlsGroup.createEl("div", { cls: "mp-font-size-group" });
      const decreaseButton = fontSizeGroup.createEl("button", {
        cls: "mp-font-size-btn",
        text: "-"
      });
      this.fontSizeSelect = fontSizeGroup.createEl("input", {
        cls: "mp-font-size-input",
        type: "text",
        value: "16",
        attr: {
          style: "border: none; outline: none; background: transparent;"
        }
      });
      const increaseButton = fontSizeGroup.createEl("button", {
        cls: "mp-font-size-btn",
        text: "+"
      });
      const settings = this.settingsManager.getSettings();
      if (settings.templateId) {
        const templateSelect = this.customTemplateSelect.querySelector(".selected-text");
        const templateDropdown = this.customTemplateSelect.querySelector(".select-dropdown");
        if (templateSelect && templateDropdown) {
          const option = yield this.getTemplateOptions();
          const selected = option.find((o) => o.value === settings.templateId);
          if (selected) {
            templateSelect.textContent = selected.label;
            (_c = this.customTemplateSelect.querySelector(".custom-select")) == null ? void 0 : _c.setAttribute("data-value", selected.value);
            templateDropdown.querySelectorAll(".select-item").forEach((el) => {
              if (el.getAttribute("data-value") === selected.value) {
                el.classList.add("selected");
              } else {
                el.classList.remove("selected");
              }
            });
          }
        }
        this.templateManager.setCurrentTemplate(settings.templateId);
      }
      if (settings.fontFamily) {
        const fontSelect = this.customFontSelect.querySelector(".selected-text");
        const fontDropdown = this.customFontSelect.querySelector(".select-dropdown");
        if (fontSelect && fontDropdown) {
          const option = this.getFontOptions();
          const selected = option.find((o) => o.value === settings.fontFamily);
          if (selected) {
            fontSelect.textContent = selected.label;
            (_d = this.customFontSelect.querySelector(".custom-select")) == null ? void 0 : _d.setAttribute("data-value", selected.value);
            fontDropdown.querySelectorAll(".select-item").forEach((el) => {
              if (el.getAttribute("data-value") === selected.value) {
                el.classList.add("selected");
              } else {
                el.classList.remove("selected");
              }
            });
          }
        }
        this.templateManager.setFont(settings.fontFamily);
      }
      if (settings.fontSize) {
        this.fontSizeSelect.value = settings.fontSize.toString();
        this.templateManager.setFontSize(settings.fontSize);
      }
      const updateFontSize = () => __async(this, null, function* () {
        const size = parseInt(this.fontSizeSelect.value);
        this.templateManager.setFontSize(size);
        yield this.settingsManager.updateSettings({
          fontSize: size
        });
        this.templateManager.applyTemplate(this.previewEl);
      });
      decreaseButton.addEventListener("click", () => {
        const currentSize = parseInt(this.fontSizeSelect.value);
        if (currentSize > 12) {
          this.fontSizeSelect.value = (currentSize - 1).toString();
          updateFontSize();
        }
      });
      increaseButton.addEventListener("click", () => {
        const currentSize = parseInt(this.fontSizeSelect.value);
        if (currentSize < 30) {
          this.fontSizeSelect.value = (currentSize + 1).toString();
          updateFontSize();
        }
      });
      this.fontSizeSelect.addEventListener("change", updateFontSize);
      this.previewEl = container.createEl("div", { cls: "mp-preview-area" });
      const bottomBar = container.createEl("div", { cls: "mp-bottom-bar" });
      const helpButton = bottomBar.createEl("button", {
        cls: "mp-help-button",
        attr: { "aria-label": "\u4F7F\u7528\u6307\u5357" }
      });
      helpButton.innerHTML = "\u2753";
      const tooltip = bottomBar.createEl("div", {
        cls: "mp-help-tooltip",
        text: `\u4F7F\u7528\u6307\u5357\uFF1A
                1. \u9009\u62E9\u559C\u6B22\u7684\u4E3B\u9898\u6A21\u677F
                2. \u8C03\u6574\u5B57\u4F53\u548C\u5B57\u53F7
                3. \u5B9E\u65F6\u9884\u89C8\u6548\u679C
                4. \u70B9\u51FB\u3010\u590D\u5236\u6309\u94AE\u3011\u5373\u53EF\u7C98\u8D34\u5230\u516C\u4F17\u53F7
                5. \u7F16\u8F91\u5B9E\u65F6\u67E5\u770B\u6548\u679C\uFF0C\u70B9\u{1F513}\u5173\u95ED\u5B9E\u65F6\u5237\u65B0
                6. \u5982\u679C\u4F60\u559C\u6B22\u8FD9\u4E2A\u63D2\u4EF6\uFF0C\u6B22\u8FCE\u6253\u8D4F`
      });
      const bottomControlsGroup = bottomBar.createEl("div", { cls: "mp-bottom-controls-group" });
      const likeButton = bottomControlsGroup.createEl("button", {
        cls: "mp-like-button"
      });
      likeButton.innerHTML = '<span style="margin-right: 4px">\u2615\uFE0F</span>\u559C\u6B22\u4F5C\u8005';
      likeButton.addEventListener("click", () => {
        DonateManager.showDonateModal(this.containerEl);
      });
      this.copyButton = bottomControlsGroup.createEl("button", {
        text: "\u590D\u5236\u4E3A\u516C\u4F17\u53F7\u683C\u5F0F",
        cls: "mp-copy-button"
      });
      const newButton = bottomControlsGroup.createEl("button", {
        text: "\u656C\u8BF7\u671F\u5F85",
        cls: "mp-new-button"
      });
      this.copyButton.addEventListener("click", () => __async(this, null, function* () {
        if (this.previewEl) {
          this.copyButton.disabled = true;
          this.copyButton.setText("\u590D\u5236\u4E2D...");
          try {
            yield CopyManager.copyToClipboard(this.previewEl);
            this.copyButton.setText("\u590D\u5236\u6210\u529F");
            setTimeout(() => {
              this.copyButton.disabled = false;
              this.copyButton.setText("\u590D\u5236\u4E3A\u516C\u4F17\u53F7\u683C\u5F0F");
            }, 2e3);
          } catch (error) {
            this.copyButton.setText("\u590D\u5236\u5931\u8D25");
            setTimeout(() => {
              this.copyButton.disabled = false;
              this.copyButton.setText("\u590D\u5236\u4E3A\u516C\u4F17\u53F7\u683C\u5F0F");
            }, 2e3);
          }
        }
      }));
      this.registerEvent(
        this.app.workspace.on("file-open", this.onFileOpen.bind(this))
      );
      this.registerEvent(
        this.app.vault.on("modify", this.onFileModify.bind(this))
      );
      const currentFile = this.app.workspace.getActiveFile();
      yield this.onFileOpen(currentFile);
    });
  }
  updateControlsState(enabled) {
    this.lockButton.disabled = !enabled;
    const templateSelect = this.customTemplateSelect.querySelector(".custom-select");
    const fontSelect = this.customFontSelect.querySelector(".custom-select");
    if (templateSelect) {
      templateSelect.classList.toggle("disabled", !enabled);
      templateSelect.setAttribute("style", `pointer-events: ${enabled ? "auto" : "none"}`);
    }
    if (fontSelect) {
      fontSelect.classList.toggle("disabled", !enabled);
      fontSelect.setAttribute("style", `pointer-events: ${enabled ? "auto" : "none"}`);
    }
    this.fontSizeSelect.disabled = !enabled;
    this.copyButton.disabled = !enabled;
    const fontSizeButtons = this.containerEl.querySelectorAll(".mp-font-size-btn");
    fontSizeButtons.forEach((button) => {
      button.disabled = !enabled;
    });
  }
  onFileOpen(file) {
    return __async(this, null, function* () {
      this.currentFile = file;
      if (!file || file.extension !== "md") {
        this.previewEl.empty();
        this.previewEl.createEl("div", {
          text: "\u53EA\u80FD\u9884\u89C8 Markdown \u6587\u672C\u6587\u6863",
          cls: "mp-empty-message"
        });
        this.updateControlsState(false);
        return;
      }
      this.updateControlsState(true);
      this.isPreviewLocked = false;
      this.lockButton.innerHTML = "\u{1F513}";
      yield this.updatePreview();
    });
  }
  togglePreviewLock() {
    return __async(this, null, function* () {
      this.isPreviewLocked = !this.isPreviewLocked;
      const lockIcon = this.isPreviewLocked ? "\u{1F512}" : "\u{1F513}";
      const lockStatus = this.isPreviewLocked ? "\u5F00\u542F\u5B9E\u65F6\u9884\u89C8\u72B6\u6001" : "\u5173\u95ED\u5B9E\u65F6\u9884\u89C8\u72B6\u6001";
      this.lockButton.innerHTML = lockIcon;
      this.lockButton.setAttribute("aria-label", lockStatus);
      if (!this.isPreviewLocked) {
        yield this.updatePreview();
      }
    });
  }
  onFileModify(file) {
    return __async(this, null, function* () {
      if (file === this.currentFile && !this.isPreviewLocked) {
        if (this.updateTimer) {
          clearTimeout(this.updateTimer);
        }
        this.updateTimer = setTimeout(() => {
          this.updatePreview();
        }, 500);
      }
    });
  }
  updatePreview() {
    return __async(this, null, function* () {
      if (!this.currentFile) return;
      this.previewEl.empty();
      const content = yield this.app.vault.read(this.currentFile);
      yield import_obsidian2.MarkdownRenderer.renderMarkdown(
        content,
        this.previewEl,
        this.currentFile.path,
        this
      );
      MPConverter.formatContent(this.previewEl);
      this.templateManager.applyTemplate(this.previewEl);
    });
  }
  // 添加自定义下拉选择器创建方法
  createCustomSelect(parent, className, options) {
    var _a;
    const container = parent.createEl("div", { cls: "custom-select-container" });
    const select = container.createEl("div", { cls: "custom-select" });
    const selectedText = select.createEl("span", { cls: "selected-text" });
    const arrow = select.createEl("span", { cls: "select-arrow", text: "\u25BE" });
    const dropdown = container.createEl("div", { cls: "select-dropdown" });
    options.forEach((option) => {
      const item = dropdown.createEl("div", {
        cls: "select-item",
        text: option.label
      });
      item.dataset.value = option.value;
      item.addEventListener("click", () => {
        dropdown.querySelectorAll(".select-item").forEach((el) => el.classList.remove("selected"));
        item.classList.add("selected");
        selectedText.textContent = option.label;
        select.dataset.value = option.value;
        dropdown.classList.remove("show");
        select.dispatchEvent(new CustomEvent("change", {
          detail: { value: option.value }
        }));
      });
    });
    if (options.length > 0) {
      selectedText.textContent = options[0].label;
      select.dataset.value = options[0].value;
      (_a = dropdown.querySelector(".select-item")) == null ? void 0 : _a.classList.add("selected");
    }
    select.addEventListener("click", (e) => {
      e.stopPropagation();
      dropdown.classList.toggle("show");
    });
    document.addEventListener("click", () => {
      dropdown.classList.remove("show");
    });
    return container;
  }
  // 获取模板选项
  getTemplateOptions() {
    return __async(this, null, function* () {
      yield this.templateManager.loadTemplates();
      const templates2 = this.templateManager.getAllTemplates();
      return templates2.length > 0 ? templates2.map((t) => ({ value: t.id, label: t.name })) : [{ value: "default", label: "\u9ED8\u8BA4\u6A21\u677F" }];
    });
  }
  // 获取字体选项
  getFontOptions() {
    return [
      {
        value: 'Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, "PingFang SC", Cambria, Cochin, Georgia, Times, "Times New Roman", serif',
        label: "\u9ED8\u8BA4\u5B57\u4F53"
      },
      {
        value: 'SimSun, "\u5B8B\u4F53", serif',
        label: "\u5B8B\u4F53"
      },
      {
        value: 'SimHei, "\u9ED1\u4F53", sans-serif',
        label: "\u9ED1\u4F53"
      },
      {
        value: 'KaiTi, "\u6977\u4F53", serif',
        label: "\u6977\u4F53"
      },
      {
        value: '"Microsoft YaHei", "\u5FAE\u8F6F\u96C5\u9ED1", sans-serif',
        label: "\u96C5\u9ED1"
      }
    ];
  }
};

// src/templates/index.ts
var defaultTemplate = require_default();
var minimalTemplate = require_minimal();
var elegantTemplate = require_elegant();
var darkTemplate = require_dark();
var academicTemplate = require_academic();
var templates = {
  default: defaultTemplate,
  minimal: minimalTemplate,
  elegant: elegantTemplate,
  dark: darkTemplate,
  academic: academicTemplate
};

// src/templateManager.ts
var TemplateManager = class {
  constructor(app) {
    this.templates = /* @__PURE__ */ new Map();
    this.currentFont = "-apple-system";
    this.currentFontSize = 16;
    this.app = app;
    this.loadTemplates();
  }
  loadTemplates() {
    return __async(this, null, function* () {
      try {
        Object.values(templates).forEach((template) => {
          this.templates.set(template.id, template);
          if (template.id === "default") {
            this.currentTemplate = template;
          }
        });
      } catch (error) {
        console.error("\u52A0\u8F7D\u6A21\u677F\u5931\u8D25:", error);
        throw new Error("\u65E0\u6CD5\u52A0\u8F7D\u6A21\u677F\u6587\u4EF6");
      }
    });
  }
  getTemplate(id) {
    return this.templates.get(id);
  }
  getCurrentTemplate() {
    return this.currentTemplate;
  }
  setCurrentTemplate(id) {
    const template = this.templates.get(id);
    if (template) {
      this.currentTemplate = template;
      return true;
    }
    return false;
  }
  getAllTemplates() {
    return Array.from(this.templates.values());
  }
  setFont(fontFamily) {
    this.currentFont = fontFamily;
  }
  setFontSize(size) {
    this.currentFontSize = size;
  }
  applyTemplate(element) {
    const styles = this.currentTemplate.styles;
    const table = element.querySelector("table");
    const td = element.querySelector("td");
    if (!table || !td) return;
    table.setAttribute("style", styles.container);
    table.setAttribute("cellpadding", "0");
    table.setAttribute("cellspacing", "0");
    td.style.cssText = `
            word-break: break-all;
            padding: 0;
            margin: 0;
            line-height: 1.7;
            overflow-wrap: break-word;
            white-space: normal;
            border: none;
            font-family: ${this.currentFont};
        `;
    td.querySelectorAll("h1").forEach((el) => {
      el.setAttribute("style", `${styles.title.h1}; font-family: ${this.currentFont};`);
    });
    td.querySelectorAll("h2").forEach((el) => {
      el.setAttribute("style", `${styles.title.h2}; font-family: ${this.currentFont};`);
    });
    td.querySelectorAll("h3").forEach((el) => {
      el.setAttribute("style", `${styles.title.h3}; font-family: ${this.currentFont};`);
    });
    td.querySelectorAll("h4, h5, h6").forEach((el) => {
      el.setAttribute("style", `${styles.title.base}; font-family: ${this.currentFont};`);
    });
    td.querySelectorAll("p").forEach((el) => {
      var _a, _b;
      if (!((_a = el.parentElement) == null ? void 0 : _a.closest("p")) && !((_b = el.parentElement) == null ? void 0 : _b.closest("blockquote"))) {
        el.setAttribute("style", `${styles.paragraph}; font-family: ${this.currentFont}; font-size: ${this.currentFontSize}px;`);
      }
    });
    td.querySelectorAll("ul, ol").forEach((el) => {
      el.setAttribute("style", styles.list.container);
    });
    td.querySelectorAll("li").forEach((el) => {
      el.setAttribute("style", `${styles.list.item}; font-family: ${this.currentFont}; font-size: ${this.currentFontSize}px;`);
    });
    td.querySelectorAll(".task-list-item").forEach((el) => {
      el.setAttribute("style", `${styles.list.taskList}; font-family: ${this.currentFont}; font-size: ${this.currentFontSize}px;`);
    });
    td.querySelectorAll("blockquote").forEach((el) => {
      el.setAttribute("style", `${styles.quote}; font-family: ${this.currentFont}; font-size: ${this.currentFontSize}px;`);
    });
    td.querySelectorAll("pre").forEach((el) => {
      el.setAttribute("style", `${styles.code.block}; font-size: ${this.currentFontSize}px;`);
    });
    td.querySelectorAll("code:not(pre code)").forEach((el) => {
      el.setAttribute("style", `${styles.code.inline}; font-size: ${this.currentFontSize}px;`);
    });
    td.querySelectorAll("a").forEach((el) => {
      el.setAttribute("style", styles.link);
    });
    td.querySelectorAll("strong").forEach((el) => {
      el.setAttribute("style", styles.emphasis.strong);
    });
    td.querySelectorAll("em").forEach((el) => {
      el.setAttribute("style", styles.emphasis.em);
    });
    td.querySelectorAll("del").forEach((el) => {
      el.setAttribute("style", styles.emphasis.del);
    });
    td.querySelectorAll("table").forEach((el) => {
      if (el === table) return;
      el.setAttribute("style", styles.table.container);
    });
    td.querySelectorAll("th").forEach((el) => {
      el.setAttribute("style", `${styles.table.header}; font-family: ${this.currentFont}; font-size: ${this.currentFontSize}px;`);
    });
    td.querySelectorAll("td").forEach((el) => {
      if (el === td) return;
      el.setAttribute("style", `${styles.table.cell}; font-family: ${this.currentFont}; font-size: ${this.currentFontSize}px;`);
    });
    td.querySelectorAll("hr").forEach((el) => {
      el.setAttribute("style", styles.hr);
    });
    td.querySelectorAll(".footnote-ref").forEach((el) => {
      el.setAttribute("style", styles.footnote.ref);
    });
    td.querySelectorAll(".footnote-backref").forEach((el) => {
      el.setAttribute("style", styles.footnote.backref);
    });
    td.querySelectorAll("img").forEach((el) => {
      const img = el;
      el.setAttribute("style", `${styles.image}; font-family: ${this.currentFont};`);
      const parent = img.parentElement;
      if (parent && parent.tagName.toLowerCase() === "p") {
        if (parent.childNodes.length === 1) {
          parent.style.textAlign = "center";
          parent.style.margin = "1em 0";
        }
      }
    });
    td.querySelectorAll("pre").forEach((el) => {
      el.setAttribute("style", `${styles.code.block};`);
    });
    td.querySelectorAll("blockquote").forEach((el) => {
      el.setAttribute("style", `${styles.quote};`);
    });
    td.querySelectorAll("ul, ol").forEach((el) => {
      el.setAttribute("style", `${styles.list.container}; font-family: ${this.currentFont};`);
    });
    td.querySelectorAll("li").forEach((el) => {
      el.setAttribute("style", `${styles.list.item}; font-family: ${this.currentFont}; font-size: ${this.currentFontSize}px;`);
    });
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  templateId: "default",
  fontFamily: "-apple-system",
  fontSize: 16
};
var SettingsManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.settings = DEFAULT_SETTINGS;
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.plugin.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.plugin.saveData(this.settings);
    });
  }
  getSettings() {
    return this.settings;
  }
  updateSettings(settings) {
    return __async(this, null, function* () {
      this.settings = __spreadValues(__spreadValues({}, this.settings), settings);
      yield this.saveSettings();
    });
  }
};

// src/main.ts
var MPPlugin = class extends import_obsidian3.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.settingsManager = new SettingsManager(this);
      yield this.settingsManager.loadSettings();
      const templateManager = new TemplateManager(this.app);
      MPConverter.initialize(this.app);
      DonateManager.initialize(this.app, this);
      this.registerView(
        VIEW_TYPE_MP,
        (leaf) => new MPView(leaf, templateManager, this.settingsManager)
      );
      this.addCommand({
        id: "open-mp-preview",
        name: "\u6253\u5F00\u516C\u4F17\u53F7\u9884\u89C8\u63D2\u4EF6",
        callback: () => __async(this, null, function* () {
          yield this.activateView();
        })
      });
      this.app.workspace.onLayoutReady(() => {
        this.activateView();
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      this.app.workspace.detachLeavesOfType(VIEW_TYPE_MP);
    });
  }
  activateView() {
    return __async(this, null, function* () {
      const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_MP);
      if (leaves.length > 0) {
        this.app.workspace.revealLeaf(leaves[0]);
        return;
      }
      const rightLeaf = this.app.workspace.getRightLeaf(false);
      if (rightLeaf) {
        yield rightLeaf.setViewState({
          type: VIEW_TYPE_MP,
          active: true
        });
      } else {
        new import_obsidian3.Notice("\u65E0\u6CD5\u521B\u5EFA\u89C6\u56FE\u9762\u677F");
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
